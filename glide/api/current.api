// Signature format: 4.0
package com.google.accompanist.glide {

  public final class GlideImage {
    method @Deprecated @androidx.compose.runtime.Composable public static void GlideImage(Object data, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function2<? super com.bumptech.glide.RequestBuilder<android.graphics.drawable.Drawable>,? super androidx.compose.ui.unit.IntSize,? extends com.bumptech.glide.RequestBuilder<android.graphics.drawable.Drawable>>? requestBuilder, optional com.bumptech.glide.RequestManager requestManager, optional @DrawableRes int previewPlaceholder, optional kotlin.jvm.functions.Function2<? super com.google.accompanist.imageloading.ImageLoadState,? super androidx.compose.ui.unit.IntSize,java.lang.Boolean> shouldRefetchOnSizeChange, optional kotlin.jvm.functions.Function1<? super com.google.accompanist.imageloading.ImageLoadState,kotlin.Unit> onRequestCompleted, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super com.google.accompanist.imageloading.ImageLoadState,kotlin.Unit> content);
    method @Deprecated @androidx.compose.runtime.Composable public static void GlideImage(Object data, String? contentDescription, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.Alignment alignment, optional androidx.compose.ui.layout.ContentScale contentScale, optional androidx.compose.ui.graphics.ColorFilter? colorFilter, optional boolean fadeIn, optional kotlin.jvm.functions.Function2<? super com.bumptech.glide.RequestBuilder<android.graphics.drawable.Drawable>,? super androidx.compose.ui.unit.IntSize,? extends com.bumptech.glide.RequestBuilder<android.graphics.drawable.Drawable>>? requestBuilder, optional com.bumptech.glide.RequestManager requestManager, optional @DrawableRes int previewPlaceholder, optional kotlin.jvm.functions.Function2<? super com.google.accompanist.imageloading.ImageLoadState,? super androidx.compose.ui.unit.IntSize,java.lang.Boolean> shouldRefetchOnSizeChange, optional kotlin.jvm.functions.Function1<? super com.google.accompanist.imageloading.ImageLoadState,kotlin.Unit> onRequestCompleted, optional kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super com.google.accompanist.imageloading.ImageLoadState.Error,kotlin.Unit>? error, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? loading);
  }

  public final class GlideKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.bumptech.glide.RequestManager> getLocalRequestManager();
    method @androidx.compose.runtime.Composable public static com.google.accompanist.imageloading.LoadPainter<java.lang.Object> rememberGlidePainter(Object? request, optional com.bumptech.glide.RequestManager requestManager, optional com.google.accompanist.imageloading.ShouldRefetchOnSizeChange shouldRefetchOnSizeChange, optional kotlin.jvm.functions.Function2<? super com.bumptech.glide.RequestBuilder<android.graphics.drawable.Drawable>,? super androidx.compose.ui.unit.IntSize,? extends com.bumptech.glide.RequestBuilder<android.graphics.drawable.Drawable>>? requestBuilder, optional boolean fadeIn, optional int fadeInDurationMs, optional @DrawableRes int previewPlaceholder);
  }

  public final class GlidePainterDefaults {
    method @androidx.compose.runtime.Composable public com.bumptech.glide.RequestManager defaultRequestManager();
    field public static final com.google.accompanist.glide.GlidePainterDefaults INSTANCE;
  }

}

