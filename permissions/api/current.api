// Signature format: 4.0
package com.google.accompanist.permissions {

  @kotlin.RequiresOptIn(message="Accompanist Permissions is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public @interface ExperimentalPermissionsApi {
  }

  @androidx.compose.runtime.Stable @com.google.accompanist.permissions.ExperimentalPermissionsApi public interface MultiplePermissionsState {
    method public boolean getAllPermissionsGranted();
    method public boolean getPermissionRequested();
    method public java.util.List<com.google.accompanist.permissions.PermissionState> getPermissions();
    method public java.util.List<com.google.accompanist.permissions.PermissionState> getRevokedPermissions();
    method public boolean getShouldShowRationale();
    method public void launchMultiplePermissionRequest();
    property public abstract boolean allPermissionsGranted;
    property public abstract boolean permissionRequested;
    property public abstract java.util.List<com.google.accompanist.permissions.PermissionState> permissions;
    property public abstract java.util.List<com.google.accompanist.permissions.PermissionState> revokedPermissions;
    property public abstract boolean shouldShowRationale;
  }

  public final class MultiplePermissionsStateKt {
    method @androidx.compose.runtime.Composable @com.google.accompanist.permissions.ExperimentalPermissionsApi public static com.google.accompanist.permissions.MultiplePermissionsState rememberMultiplePermissionsState(java.util.List<java.lang.String> permissions);
  }

  public final class MutableMultiplePermissionsStateKt {
  }

  public final class MutablePermissionStateKt {
  }

  @androidx.compose.runtime.Stable @com.google.accompanist.permissions.ExperimentalPermissionsApi public interface PermissionState {
    method public boolean getHasPermission();
    method public String getPermission();
    method public boolean getPermissionRequested();
    method public boolean getShouldShowRationale();
    method public void launchPermissionRequest();
    property public abstract boolean hasPermission;
    property public abstract String permission;
    property public abstract boolean permissionRequested;
    property public abstract boolean shouldShowRationale;
  }

  public final class PermissionStateKt {
    method @androidx.compose.runtime.Composable @com.google.accompanist.permissions.ExperimentalPermissionsApi public static com.google.accompanist.permissions.PermissionState rememberPermissionState(String permission);
  }

  public final class PermissionsRequiredKt {
    method @androidx.compose.runtime.Composable @com.google.accompanist.permissions.ExperimentalPermissionsApi public static void PermissionRequired(com.google.accompanist.permissions.PermissionState permissionState, kotlin.jvm.functions.Function0<kotlin.Unit> permissionNotGrantedContent, kotlin.jvm.functions.Function0<kotlin.Unit> permissionNotAvailableContent, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable @com.google.accompanist.permissions.ExperimentalPermissionsApi public static void PermissionsRequired(com.google.accompanist.permissions.MultiplePermissionsState multiplePermissionsState, kotlin.jvm.functions.Function0<kotlin.Unit> permissionsNotGrantedContent, kotlin.jvm.functions.Function0<kotlin.Unit> permissionsNotAvailableContent, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class PermissionsUtilKt {
  }

}

