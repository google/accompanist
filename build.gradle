/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import dev.chrisbanes.accompanist.buildsrc.Libs
import dev.chrisbanes.accompanist.buildsrc.Versions

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath Libs.androidGradlePlugin
        classpath Libs.Kotlin.gradlePlugin

        classpath Libs.gradleMavenPublishPlugin

        classpath Libs.Dokka.gradlePlugin
        classpath Libs.Kotlin.binaryCompatibility
    }
}

plugins {
    id "com.diffplug.spotless" version "5.1.1"
}

apply plugin: 'binary-compatibility-validator'
apiValidation {
    // Ignore the sample from API tracking/checking
    ignoredProjects += ["sample"]
}

subprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()

        if (!Libs.AndroidX.Compose.snapshot.isEmpty()) {
            maven { url Libs.AndroidX.Compose.snapshotUrl }
        }
    }

    if (!Libs.AndroidX.Compose.snapshot.isEmpty()) {
        // We're depending on a Jetpack Compose snapshot, update the library version name
        // to indicate it's from a Compose snapshot
        def versionName = project.properties.get('VERSION_NAME')
        if (versionName.contains("SNAPSHOT")) {
            version = versionName.replace(
                    '-SNAPSHOT',
                    ".compose-${Libs.AndroidX.Compose.snapshot}-SNAPSHOT"
            )
        } else {
            throw new IllegalArgumentException("Using Jetpack Compose SNAPSHOT repository" +
                    " but library version name is not set to SNAPSHOT")
        }
    }

    apply plugin: 'com.diffplug.spotless'
    spotless {
        kotlin {
            target "**/*.kt"
            ktlint(Versions.ktlint)
            licenseHeaderFile rootProject.file('spotless/copyright.txt')
        }

        groovyGradle {
            target '**/*.gradle'
            greclipse().configFile(rootProject.file('spotless/greclipse.properties'))
            licenseHeaderFile rootProject.file('spotless/copyright.txt'),
                              '(buildscript|apply|import)'
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            // Treat all Kotlin warnings as errors
            allWarningsAsErrors = true

            // Set JVM target to 1.8
            jvmTarget = "1.8"

            // Allow use of @OptIn
            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"

            freeCompilerArgs += "-Xallow-jvm-ir-dependencies"
        }
    }

    // Read in the signing.properties file if it is exists
    def signingPropsFile = rootProject.file('release/signing.properties')
    if (signingPropsFile.exists()) {
        def localProperties = new Properties()
        signingPropsFile.withInputStream { is -> localProperties.load(is) }
        localProperties.each { prop ->
            if (prop.key == "signing.secretKeyRingFile") {
                // If this is the key ring, treat it as a relative path
                project.ext.set(prop.key, rootProject.file(prop.value).absolutePath)
            } else {
                project.ext.set(prop.key, prop.value)
            }
        }
    }

    // Must be afterEvaluate or else com.vanniktech.maven.publish will overwrite our
    // dokka configuration.
    afterEvaluate {
        tasks.withType(org.jetbrains.dokka.gradle.DokkaTask).configureEach {
            sourceSets {
                configureEach {
                    reportUndocumented.set(true)
                    skipEmptyPackages.set(true)
                    skipDeprecated.set(true)
                    jdkVersion.set(8)
                    // Add Android SDK packages
                    noAndroidSdkLink.set(false)

                    // Link Compose docs
                    externalDocumentationLink {
                        url.set(new URL("https://developer.android.com/reference/kotlin/"))
                        packageListUrl.set(new URL("https://developer.android.com/reference/kotlin/androidx/ui/package-list"))
                    }
                    // Link Coil docs
                    if (rootProject.file('package-list-coil-base').exists()) {
                        externalDocumentationLink {
                            url.set(new URL("https://coil-kt.github.io/coil/api/coil-base/"))
                            packageListUrl.set(new URL("file://$rootDir/package-list-coil-base"))
                        }
                    }
                    externalDocumentationLink {
                        url.set(new URL("https://square.github.io/picasso/2.x/picasso/"))
                        packageListUrl.set(new URL("https://square.github.io/picasso/2.x/picasso/package-list"))
                    }
                }
            }
        }
    }
}
